project_name: fastapi_project
description: A FastAPI-based web API project template following best practices
directories:
  - app
  - app/api
  - app/api/routes
  - app/models
  - app/schemas
  - app/core
  - app/db
  - app/services
  - tests

files:
  .gitignore: |
    __pycache__/
    *.pyc
    .env
    .venv
    .DS_Store
  requirements.txt: |
    fastapi
    uvicorn
    pydantic
    sqlalchemy
    alembic
    psycopg2
    python-dotenv
  app/__init__.py: ""
  app/main.py: |
    from fastapi import FastAPI
    from app.api.routes import router
    from app.core.config import settings

    app = FastAPI(title=settings.PROJECT_NAME, version=settings.PROJECT_VERSION)

    app.include_router(router, prefix="/api")

    @app.get("/")
    def root():
        return {"message": "Welcome to FastAPI"}

  app/api/__init__.py: ""
  app/api/routes/__init__.py: ""
  app/api/routes/user.py: |
    from fastapi import APIRouter, Depends, HTTPException
    from sqlalchemy.orm import Session
    from app.db.database import get_db
    from app.models.user import User
    from app.schemas.user import UserCreate, UserResponse

    router = APIRouter()

    @router.post("/users", response_model=UserResponse)
    def create_user(user: UserCreate, db: Session = Depends(get_db)):
        db_user = db.query(User).filter(User.email == user.email).first()
        if db_user:
            raise HTTPException(status_code=400, detail="Email already registered")
        new_user = User(email=user.email, hashed_password=user.password)
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        return new_user

  app/models/__init__.py: ""
  app/models/user.py: |
    from sqlalchemy import Column, Integer, String
    from app.db.database import Base

    class User(Base):
        __tablename__ = "users"

        id = Column(Integer, primary_key=True, index=True)
        email = Column(String, unique=True, index=True)
        hashed_password = Column(String)

  app/schemas/__init__.py: ""
  app/schemas/user.py: |
    from pydantic import BaseModel, EmailStr

    class UserBase(BaseModel):
        email: EmailStr

    class UserCreate(UserBase):
        password: str

    class UserResponse(UserBase):
        id: int

        class Config:
            orm_mode = True

  app/core/__init__.py: ""
  app/core/config.py: |
    from pydantic import BaseSettings

    class Settings(BaseSettings):
        PROJECT_NAME: str = "FastAPI Project"
        PROJECT_VERSION: str = "1.0.0"
        DATABASE_URL: str = "postgresql://user:password@localhost/dbname"

        class Config:
            env_file = ".env"

    settings = Settings()

  app/db/__init__.py: ""
  app/db/database.py: |
    from sqlalchemy import create_engine, MetaData
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy.orm import sessionmaker
    from app.core.config import settings

    SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL

    engine = create_engine(SQLALCHEMY_DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

    Base = declarative_base()

    def get_db():
        db = SessionLocal()
        try:
            yield db
        finally:
            db.close()

  app/services/__init__.py: ""
  app/services/user_service.py: |
    from sqlalchemy.orm import Session
    from app.models.user import User
    from app.schemas.user import UserCreate

    def create_user(db: Session, user: UserCreate):
        new_user = User(email=user.email, hashed_password=user.password)
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        return new_user

  tests/__init__.py: ""
  tests/test_main.py: |
    from fastapi.testclient import TestClient
    from app.main import app

    client = TestClient(app)

    def test_root():
        response = client.get("/")
        assert response.status_code == 200
        assert response.json() == {"message": "Welcome to FastAPI"}
